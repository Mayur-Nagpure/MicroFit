Client (e.g., frontend or API call)
   ‚¨á
Controller  ‚ûù  Service  ‚ûù  Repository  ‚ûù  Database (MongoDB)
             ‚Üï           ‚Üï
           DTOs         Model (Entity)

‚úÖ Roles of Each Piece
1. üì® DTOs ‚Äî ActivityRequest and ActivityResponse
Where? Used in Controller and Service layers.

Purpose:

Act as data carriers between layers (especially between external clients and your internal system).

Prevent exposing your entity/model (which might contain DB-specific or sensitive data).

Examples:

ActivityRequest: represents input data from the client.

ActivityResponse: represents output data returned to the client.

Used in:

java
Copy
Edit
// In Controller:
@PostMapping
public ResponseEntity<ActivityResponse> trackActivity(@RequestBody ActivityRequest request)
java
Copy
Edit
// In Service:
public ActivityResponse trackActivity(ActivityRequest request)
--------------------------------------------------------------------
2. üß± Model (Entity) ‚Äî Activity
Where? Used in Service and Repository.

Purpose:

This is the real object stored in the database.

Annotated with @Document, it maps to a MongoDB collection.

Example:

java
Copy
Edit
@Document(collection = "activities")
public class Activity {
    @Id
    private String id;
    private String userId;
    ...
}
Used in:

java
Copy
Edit
// In Service:
Activity activity = Activity.builder()
    .userId(request.getUserId())
    ...
    .build();
java
Copy
Edit
// In Repository:
activityRepository.save(activity);
--------------------------------------------------------------------------------
3. ‚öôÔ∏è MongoConfig
Where? It's a Spring configuration class, usually in a config package.

Purpose:

Turns on auditing for MongoDB using:

java
Copy
Edit
@EnableMongoAuditing
Required if you're using annotations like @CreatedDate and @LastModifiedDate in your model.

Used once, globally, not in the main data flow.

java
Copy
Edit
@Configuration
@EnableMongoAuditing
public class MongoConfig {
}
üß† Summary Table
Component	Type	Layer/Use	Role
ActivityRequest	DTO	Controller ‚Üí Service	Input from API call
ActivityResponse	DTO	Service ‚Üí Controller ‚Üí Client	Output sent back to the client
Activity	Model / Entity	Service ‚Üî Repository ‚Üî MongoDB	The actual object stored in the DB
MongoConfig	Configuration	App configuration	Enables auditing for auto-handling created/updated timestamps
-----------------------------------------------------------------------------------------------------------------

Client sends JSON ‚ûù Controller receives and maps to ActivityRequest ‚ûù
Service builds Activity model from ActivityRequest ‚ûù
Repository saves Activity ‚ûù
Service maps saved Activity to ActivityResponse ‚ûù
Controller returns ActivityResponse to client
